import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

defaultTasks "replaceCadastralSurveyingData"

def GROUP = "AV-Import"

//def dbSchemas = ["stage", "live"]
def dbSchemas = ["live"]

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, "unzip_data")
def iliModelAmtlicheVermessung = "DM01AVCH24LV95D"

def cadastralSurveyingBaseUrl = "https://data.geo.admin.ch/ch.swisstopo-vd.amtliche-vermessung/DM01AVCH24D/ITF/"
//def cadastralSurveyingDataSets = ["2901","2903","2904","2914","2915","2917","2919","2920","2931","2932","2933","2936","2937","2938","2939","2951","2952","2953","2961","2962","2963","2964","2971","2972","2973","2974"]
//def cadastralSurveyingDataSets = ["2939"]
def cadastralSurveyingDataSets = ["SO/2430", "SO/2457", "SO/2491", "SO/2492", "SO/2501", "SO/2502", "SO/2546", "SO/2572", "SO/2573", "SO/2574", "SO/2580", "SO/2582", "SO/2585", "SO/2601", "SH/2939"]

cadastralSurveyingDataSets.each { cadastralSurveyingDataSet ->
    def dataSet = cadastralSurveyingDataSet.toString().substring(3)
    task "downloadCadastralSurveyingData_$dataSet"(type: Download) {
        group = GROUP
        description = "Download AV-Datensatz: ${dataSet}"
        src cadastralSurveyingBaseUrl + cadastralSurveyingDataSet.toString() + ".zip"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }

    task "unzipCadastralSurveyingData_$dataSet"(type: Copy, dependsOn: "downloadCadastralSurveyingData_$dataSet") {
        group = GROUP
        description = "Unzip heruntergeladene Daten"
        from zipTree(Paths.get(pathToTempFolder, dataSet + ".zip"))
        into file(pathToUnzipFolder)
        include "**/*.itf"

        doLast {
            println "File unzipped to directory: " + pathToUnzipFolder
        }    
    }

    task "replaceCadastralSurveyingData_$dataSet"(type: Ili2pgReplace, dependsOn: "unzipCadastralSurveyingData_$dataSet") {
        group = GROUP
        description = "Import AV-Datensatz: ${dataSet}"
        database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
        models = iliModelAmtlicheVermessung
        dbschema = dbSchemas[0]
        dataFile = file(Paths.get(pathToUnzipFolder.toString(), "de", dataSet + ".itf"))
        topics = "DM01AVCH24LV95D.Liegenschaften;DM01AVCH24LV95D.Gemeindegrenzen;DM01AVCH24LV95D.Gebaeudeadressen"
        dataset = dataSet
        disableValidation = true

        doLast {
            println "Data imported into db: " + dbUriOerebV2
        }        
    }
}

task replaceCadastralSurveyingData() {
    description = "Aggregationstask für das Importieren/Ersetzen sämtlicher AV-Daten."
    group = GROUP
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('replaceCadastralSurveyingData_') }
    }    
}