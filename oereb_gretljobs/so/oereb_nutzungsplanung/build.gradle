import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

def GROUP = "Nutzungsplanung-Import"

//def dbSchemas = ["stage", "live"]
def dbSchemas = ["live"]

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, "unzip_data")

def iliModelTransferstruktur = "OeREBKRMtrsfr_V2_0"
def baseUrl = "https://s3.eu-central-1.amazonaws.com/ch.so.agi.geodata-test/"

def oerebThemen = [
    "ch.so.arp.oereb_nutzungsplanung_V2_0"
]

defaultTasks "importData"

oerebThemen.each { oerebThema ->
    def themaName = oerebThema.toString()

    task "download_$themaName"(type: Download) {
        group = GROUP
        description = "Download NPL-Daten"
        src baseUrl + themaName + "_xtf_20220420.zip"
        dest pathToTempFolder
        overwrite true
    }

    task "unzipData_$themaName"(type: Copy, dependsOn: "download_$themaName") {
        group = GROUP
        description = "Unzip zip file"
        from zipTree(Paths.get(pathToTempFolder, themaName+"_xtf_20220420.zip"))
        into file(pathToUnzipFolder)
        //include "**/*.xtf"
        /*
        rename { String fileName ->
            if (fileName.contains(themaName)) {
                return themaName + ".xtf"
            }
            return fileName
        }
        */
    }

    task "replaceWmsServer_$themaName"(dependsOn: "unzipData_$themaName") {
        group = GROUP
        description = "Ersetzt verschiedene Elemente (Host, Pfad, etc.) der WMS-Requests."
        doLast {
            ant.replace(
            file: file(Paths.get(pathToUnzipFolder.toString(), themaName + ".xtf")),
            token: 'https://geo-t.so.ch/wms/oereb',
            value: 'https://geo.so.ch/wms/oereb',
            encoding: 'UTF-8')
        }
    }

    dbSchemas.eachWithIndex { dbSchema, i ->
        def schema = dbSchema.toString()
        def taskIndex = i.toString()
    
        task "import_$themaName$schema"(type: Ili2pgReplace, dependsOn: "replaceWmsServer_$themaName") {
            group = GROUP
            description = "Import Nutzungsplanung in DB schema $schema"
            database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
            dbschema = schema
            dataset = themaName
            importBid = true
            importTid = true
            models = iliModelTransferstruktur
            dataFile = file(Paths.get(pathToUnzipFolder.toString(), themaName + ".xtf"))
            disableValidation = false
        }
    }
}

task importData() {
    group = GROUP
    description = "Aggregationstask fÃ¼r Import NPL."

    dependsOn {
        tasks.findAll { task -> task.name.startsWith('import_') }
    }   
}
